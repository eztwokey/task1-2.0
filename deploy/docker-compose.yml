services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports: [ "2181:2181" ]
    healthcheck:
      test: ["CMD", "bash", "-lc", "echo srvr | nc -w 2 localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.7
    ports: [ "9092:9092" ]
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "bash", "-lc", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-wb}
      - POSTGRES_USER=${POSTGRES_USER:-wb}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-wbpass}
    ports: [ "5432:5432" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-wb} -d $${POSTGRES_DB:-wb}"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  migrator:
    image: migrate/migrate:v4.17.0
    command: ["-path", "/migrations", "-database", "postgres://wb:wbpass@postgres:5432/wb?sslmode=disable", "up"]
    volumes:
      - ../migrations:/migrations:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: "on-failure"

  app:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    image: wb-order-service:1.0.0
    env_file: ../.env
    ports: [ "8081:8081" ]
    depends_on:
      - kafka
      - postgres
      - migrator
    restart: unless-stopped

  producer:
    image: wb-order-service:1.0.0
    entrypoint: ["/producer"]
    env_file: ../.env
    depends_on:
      - kafka

volumes:
  pgdata: {}
